@page "/"
@using Polyglot.Models

@inject IHxMessengerService Messenger
@inject IJSRuntime JsRuntime
@inject ILogger<Home> Logger

<PageTitle>Polyglot</PageTitle>

<h1 style="text-align: center">Polyglot</h1>
<h3 style="text-align: center">Read-It-Later Format Conversion Tool</h3>
<br /><br />

<div class="container">
    <div class="row">
        <div class="col-sm" />
        <div class="col-lg">
            <HxSelect TItem="string"
                      TValue="string"
                      Label="Input Format"
                      Data="@_inputFormats"
                      @bind-Value="@_inputFormat"
                      TextSelector="@(p => p.ToString())"
                      ValueSelector="@(p => p.ToString())"
                      Nullable="true"
                      NullText="-select format-"
                      NullDataText="Loading options..." />
            <p />
            <HxSelect TItem="string"
                      TValue="string"
                      Label="Output Format"
                      Data="@_outputFormats"
                      @bind-Value="@_outputFormat"
                      TextSelector="@(p => p.ToString())"
                      ValueSelector="@(p => p.ToString())"
                      Nullable="true"
                      NullText="-select format-"
                      NullDataText="Loading options..." />
            <p />
            <HxInputFile Label="Upload File" Accept=".csv, .json" OnChange="ConvertFile" MaxFileSize="10000000" Multiple="true" />
            @if (_fileUploading)
            {
                <p />
                <HxSpinner Color="ThemeColor.Primary" />
            }
        </div>
        <div class="col-sm" />
    </div>
</div>

@code {
    private string _fileName = String.Empty;
    private bool _fileUploading;
    private IEnumerable<string> _inputFormats = Enumerable.Empty<string>();
    private IEnumerable<string> _outputFormats = Enumerable.Empty<string>();
    private string? _inputFormat;
    private string? _outputFormat;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _inputFormats = Enum.GetValues(typeof(InputFormats)).Cast<InputFormats>().Select(v => v.ToString());
        _outputFormats = Enum.GetValues(typeof(OutputFormats)).Cast<OutputFormats>().Select(v => v.ToString());
    }

    private async Task ConvertFile(InputFileChangeEventArgs args)
    {
        if (String.IsNullOrEmpty(_inputFormat))
        {
            Messenger.AddError("No input format specified!");

            return;
        }

        if (String.IsNullOrEmpty(_outputFormat))
        {
            Messenger.AddError("No output format specified!");

            return;
        }

        _fileName = _outputFormat switch
        {
            "GoodLinks" => "goodlinks.json",
            "Instapaper" => "instapaper.csv",
            "Raindrop" => "raindrop.csv",
            "Readwise" => "readwise.csv",
            _ => _fileName
        };

        List<MasterModel> processedLinks = new();

        _fileUploading = true;

        foreach (IBrowserFile file in args.GetMultipleFiles(args.FileCount))
        {
            try
            {
                await using MemoryStream stream = new();
                await file.OpenReadStream(maxAllowedSize: 10000000).CopyToAsync(stream);
                processedLinks.AddRange(ConversionService.ConvertInputFile(stream, _inputFormat));
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, ex.Message);
                Messenger.AddError($"Error reading file {file.Name}!");
                _fileUploading = false;
                return;
            }
        }

        if (processedLinks.Count == 0)
        {
            Messenger.AddError("No links found in the uploaded file(s)!");
            _fileUploading = false;
            return;
        }

        try
        {
            var result = ConversionService.GenerateOutputFile(processedLinks, _outputFormat);
            using var streamRef = new DotNetStreamReference(stream: result);
            await JsRuntime.InvokeVoidAsync("downloadFileFromStream", _fileName, streamRef);

            if (args.FileCount > 1) Messenger.AddInformation($"Successfully converted {args.FileCount} files from {_inputFormat} to {_outputFormat} format.");
            else Messenger.AddInformation($"Successfully converted file from {_inputFormat} to {_outputFormat} format.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
            if (args.FileCount > 1) Messenger.AddError($"Error converted files from {_inputFormat} to {_outputFormat} format!");
            else Messenger.AddError($"Error converted file(s) from {_inputFormat} to {_outputFormat} format!");
        }

        _fileUploading = false;
    }

}
